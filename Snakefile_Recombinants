"""``snakemake`` file that runs the Gene Investigator analysis.
Written by Alexander G Lucaci.

For this, I don't need the alignment stuff, since we have an alignment, and its recombination free (tested via RDP).
Jump back in ad the TN93 and IQTREE step, then selection analyes

"""

import itertools
import os
import sys
import csv
import json
from pathlib import Path
from snakemake.utils import min_version
#min_version('6.3.0')

#----------------------------------------------------------------------------
# Configuration
#----------------------------------------------------------------------------
configfile: 'config.yaml'

Nucleotide_file = config["Nucleotide"]
Protein_file = config["Protein"]
CSV = config["CSV"]
Label = config["Label"]
Recombinant = config["Recombinant"]


# Batch files
PREMSA = config["PREMSA"]
POSTMSA = config["POSTMSA"]
FMM = config["FMM"]
BUSTEDS_MH = config["BUSTEDSMH"]
LabelTrees_bf = config["LabelTrees"]

# Set output directory
BASEDIR = os.getcwd()
#SUBDIR = os.path.join(BASEDIR, 
#OUTDIR = os.path.join(BASEDIR, *["results", Label, "Recombinants"])

#print("{snakemake} Output directory:", BASEDIR)

# Create output dir.
#Path(BASEDIR).mkdir(parents=True, exist_ok=True)

#----------------------------------------------------------------------------
# Helper functions
#----------------------------------------------------------------------------


#----------------------------------------------------------------------------
# Rule all
#----------------------------------------------------------------------------
rule all:
    input:
        #os.path.join(BASEDIR, Recombinant),
        #os.path.join(BASEDIR, Recombinant + "_protein.fas"),
        #os.path.join(BASEDIR, Recombinant + "_nuc.fas"),
        #os.path.join(BASEDIR, Recombinant + "_protein.aln"),
        #os.path.join(BASEDIR, Recombinant + "''"),
        #os.path.join(BASEDIR, Recombinant + "_codons_duplicates.json"),
        os.path.join(BASEDIR, Recombinant + ".dst"),
        os.path.join(BASEDIR, Recombinant + ".treefile"),
        os.path.join(BASEDIR, Recombinant + ".FEL.json"),
        os.path.join(BASEDIR, Recombinant + ".FUBAR.json"),
        os.path.join(BASEDIR, Recombinant + ".BUSTEDS.json"),
        os.path.join(BASEDIR, Recombinant + ".MEME.json"),
        os.path.join(BASEDIR, Recombinant + ".ABSREL.json"),
        os.path.join(BASEDIR, Recombinant + ".SLAC.json"),
        os.path.join(BASEDIR, Recombinant + ".BGM.json"),
        os.path.join(BASEDIR, Recombinant + ".PRIME.json"),
        os.path.join(BASEDIR, Recombinant + ".ABSREL-MH.json"),
        os.path.join(BASEDIR, Recombinant + ".BUSTEDS-MH.json"),
        os.path.join(BASEDIR, Recombinant + ".FMM.json"),
        os.path.join(BASEDIR, Recombinant + ".rooted")
#end rule all

#----------------------------------------------------------------------------
# Rules
#----------------------------------------------------------------------------
#rule get_codons:
#    output:
#        codons = os.path.join(BASEDIR, Recombinant)
#    params:
#        Nuc = Nucleotide_file,
#        Prot = Protein_file,
#        Out = os.path.join(BASEDIR, Recombinant)
#    conda: 'environment.yaml'
#    script:
#        "scripts/codons.py"
##end rule get_codons

#rule pre_msa:
#    input: 
#        codons = rules.get_codons.output.codons
#    output: 
#        protein_fas = os.path.join(BASEDIR, Recombinant + "_protein.fas"),
#        nucleotide_fas = os.path.join(BASEDIR, Recombinant + "_nuc.fas")
#    conda: 'environment.yaml'
#    shell: 
#        "hyphy {PREMSA} --input {input.codons}"
##end rule pre_msa

#rule mafft:
#    input:
#        protein = rules.pre_msa.output.protein_fas
#    output:
#        protein_aln = os.path.join(BASEDIR, Recombinant + "_protein.aln")
#    conda: 'environment.yaml'
#    shell:
#        "mafft --auto {input.protein} > {output.protein_aln}"
##end rule mafft

#rule post_msa:
#    input: 
#        protein_aln = rules.mafft.output.protein_aln,
#        nucleotide_seqs = rules.pre_msa.output.nucleotide_fas      
#    output: 
#        codons_fas = os.path.join(BASEDIR, Recombinant + "''"),
#        duplicates_json = os.path.join(BASEDIR, Recombinant + "_codons_duplicates.json")
#    conda: 'environment.yaml'
#    shell: 
#        "hyphy {POSTMSA} --protein-msa {input.protein_aln} --nucleotide-sequences {input.nucleotide_seqs} --output {output.codons_fas} --duplicates {output.duplicates_json}"
##end rule pre_msa

#----------------------------------------------------------------------------
# AlignmentProfiler
#----------------------------------------------------------------------------

#----------------------------------------------------------------------------
# TN93, on codon alignment, can be modified for distance calcs on protein aln
#----------------------------------------------------------------------------
rule tn93:
    input:
       #input = Recombinant
       input = Recombinant
    output:
       output = os.path.join(BASEDIR, Recombinant + ".dst")
    shell:
       "tn93 -t 1 -o {output.output} {input.input}"
#end rule tn93

#----------------------------------------------------------------------------
# IQ-TREE for ML tree inference
#----------------------------------------------------------------------------
rule iqtree: # Unrooted
    input:
        codons_fas = Recombinant
    output:
        tree = os.path.join(BASEDIR, Recombinant + ".treefile")
    conda: 'environment.yaml'
    shell:
        "iqtree -s {input.codons_fas} -T AUTO"
#end rule iqtree

# IQTree procedure for rooting
# http://www.iqtree.org/doc/Rootstrap
# http://www.iqtree.org/doc/Substitution-Models
rule iqtree_rooted: # Rooted tree, used for FADE
    input:
        codons_fas = Recombinant
    output:
        tree = os.path.join(BASEDIR, Recombinant + ".rooted")
    conda: 'environment.yaml'
    shell:
        #"iqtree -s {input.codons_fas}"
        "iqtree -s {input.codons_fas} --model-joint 12.12 -T AUTO --prefix {output.tree}"
#end rule iqtree

#----------------------------------------------------------------------------
# FADE, need to root on something.
#----------------------------------------------------------------------------

#----------------------------------------------------------------------------
# Annotate tree for taxonomy.
#----------------------------------------------------------------------------
#rule Lineage:
#    params:
#        csv = CSV,
#        tree = rules.iqtree.output.tree,
#        outdir = BASEDIR,
#        label = Recombinant,
#    output:
#        output = os.path.join(BASEDIR, Recombinant + ".txt")
#    conda: 'environment.yaml'
#    script:
#        "notebooks/LineageAnnotation.py"
#end rule Lineage

#rule Annotate:
#    input:
#        clade_file = os.path.join(BASEDIR, Recombinant + "_{clade_name}.clade"),
#        tree = rules.iqtree.output.tree
#    output:
#        clade_tree = os.path.join(BASEDIR, Recombinant + "''.{clade_name}.treefile")
#    conda: 'environment.yaml'
#    shell:
#        "hyphy {RecombinantTrees_bf} --tree {input.tree} --output {output.clade_tree} --list {input.clade_file}"      
#end rule Annotate

#----------------------------------------------------------------------------
# Selection Analyses
#----------------------------------------------------------------------------

rule FEL:
    input: 
        codon_aln = Recombinant,
        tree = rules.iqtree.output.tree      
    output: 
        results = os.path.join(BASEDIR, Recombinant + ".FEL.json")
    conda: 'environment.yaml'
    shell: 
        "hyphy FEL --alignment {input.codon_aln} --tree {input.tree} --output {output.results}"
#end rule FEL

rule FUBAR:
    input: 
        codon_aln = Recombinant,
        tree = rules.iqtree.output.tree      
    output: 
        results = os.path.join(BASEDIR, Recombinant + ".FUBAR.json")
    conda: 'environment.yaml'    
    shell: 
        "hyphy FUBAR --alignment {input.codon_aln} --tree {input.tree} --output {output.results}"
#end rule FUBAR

rule BUSTEDS:
    input: 
        codon_aln = Recombinant,
        tree = rules.iqtree.output.tree      
    output: 
        results = os.path.join(BASEDIR, Recombinant + ".BUSTEDS.json")
    conda: 'environment.yaml'
    shell: 
        "hyphy BUSTED --alignment {input.codon_aln} --tree {input.tree} --output {output.results}"
#end rule BUSTEDS

rule MEME:
    input: 
        codon_aln = Recombinant,
        tree = rules.iqtree.output.tree      
    output: 
        results = os.path.join(BASEDIR, Recombinant + ".MEME.json")
    conda: 'environment.yaml'
    shell: 
        "hyphy MEME --alignment {input.codon_aln} --tree {input.tree} --output {output.results}"
#end rule MEME

rule ABSREL:
    input: 
        codon_aln = Recombinant,
        tree = rules.iqtree.output.tree      
    output: 
        results = os.path.join(BASEDIR, Recombinant + ".ABSREL.json")
    conda: 'environment.yaml'
    shell: 
        "hyphy ABSREL --alignment {input.codon_aln} --tree {input.tree} --output {output.results}"
#end rule ABSREL

rule SLAC:
    input: 
        codon_aln = Recombinant,
        tree = rules.iqtree.output.tree      
    output: 
        results = os.path.join(BASEDIR, Recombinant + ".SLAC.json")
    conda: 'environment.yaml'
    shell: 
        "hyphy SLAC --alignment {input.codon_aln} --tree {input.tree} --output {output.results}"
#end rule 

rule BGM:
    input: 
        codon_aln = Recombinant,
        tree = rules.iqtree.output.tree      
    output: 
        results = os.path.join(BASEDIR, Recombinant + ".BGM.json")
    conda: 'environment.yaml'
    shell: 
        "hyphy BGM --alignment {input.codon_aln} --tree {input.tree} --output {output.results}"
#end rule 

rule PRIME:
    input: 
        codon_aln = Recombinant,
        tree = rules.iqtree.output.tree      
    output: 
        results = os.path.join(BASEDIR, Recombinant + ".PRIME.json")
    conda: 'environment.yaml'
    shell: 
        "hyphy PRIME --alignment {input.codon_aln} --tree {input.tree} --output {output.results} --impute-states Yes"
#end rule 

rule ABSRELMH:
    input: 
        codon_aln = Recombinant,
        tree = rules.iqtree.output.tree      
    output: 
        results = os.path.join(BASEDIR, Recombinant + ".ABSREL-MH.json")
    conda: 'environment.yaml'
    shell: 
        "hyphy ABSREL --alignment {input.codon_aln} --tree {input.tree} --output {output.results} --multiple-hits Double+Triple"
#end rule ABSRELMH

rule BUSTEDSMH:
    input: 
        codon_aln = Recombinant,
        tree = rules.iqtree.output.tree      
    output: 
        results = os.path.join(BASEDIR, Recombinant + ".BUSTEDS-MH.json")
    conda: 'environment.yaml'
    shell: 
        "hyphy {BUSTEDS_MH} --alignment {input.codon_aln} --tree {input.tree} --output {output.results}"
#end rule BUSTEDSMH

rule FMM:
    input: 
        codon_aln = Recombinant,
        tree = rules.iqtree.output.tree      
    output: 
        results = os.path.join(BASEDIR, Recombinant + ".FMM.json")
    conda: 'environment.yaml'
    shell: 
        "hyphy {FMM} --alignment {input.codon_aln} --tree {input.tree} --output {output.results} --triple-islands Yes"
#end rule FMM

#----------------------------------------------------------------------------
# End of file
#----------------------------------------------------------------------------
